(window.webpackJsonp=window.webpackJsonp||[]).push([[213],{572:function(e,t,a){"use strict";a.r(t);var r=a(42),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("ðŸ”¥ Checkout our new Azure Developer page at "),a("a",{attrs:{href:"https://azure.com/developer?WT.mc_id=azure-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("azure.com/developer"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("ðŸ’¡ Learn more : "),a("a",{attrs:{href:"https://graphql.org/?WT.mc_id=other-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("The official GraphQL website"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("ðŸ“º Watch the video : "),a("a",{attrs:{href:"https://youtu.be/4_QfUE71p-4?WT.mc_id=youtube-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("GraphQL on Azure"),a("OutboundLink")],1),e._v(".")])]),e._v(" "),a("h3",{attrs:{id:"how-to-use-a-graphql-on-azure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-use-a-graphql-on-azure"}},[e._v("#")]),e._v(" How to use a GraphQL on Azure")]),e._v(" "),a("h4",{attrs:{id:"evolve-your-apis-with-graphql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#evolve-your-apis-with-graphql"}},[e._v("#")]),e._v(" Evolve your APIs with GraphQL")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://graphql.org/?WT.mc_id=other-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("GraphQL"),a("OutboundLink")],1),e._v(" is a great way of creating and querying APIs. A GraphQL API is different from a REST API in that it allows the client application to query for certain fields of resources, like the name of a user, and only receive that data. The client controls what data it receives, not the server.\nAlso, GraphQL provides an abstraction layer to the client, which means that clients don't need to query multiple URLs to access different data. GraphQL APIs get all the data a client needs in a single request when you use multiple GraphQL queries in one request.")]),e._v(" "),a("p",[e._v("GraphQL itself is not a framework or runtime that you can use. It is a specification of how to implement an API server-side and how to query it from a client application.")]),e._v(" "),a("p",[e._v("In this post, we'll create a GraphQL API in ASP.NET Core and run that on an "),a("a",{attrs:{href:"https://azure.microsoft.com/services/app-service/web/?WT.mc_id=azure-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("Azure App Service Web App"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h4",{attrs:{id:"prerequisites"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),a("p",[e._v("If you want to follow along, you'll need the following:")]),e._v(" "),a("ul",[a("li",[e._v("An Azure subscription (If you don't have an Azure subscription, create a "),a("a",{attrs:{href:"https://azure.microsoft.com/free/?WT.mc_id=azure-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("free account"),a("OutboundLink")],1),e._v(" before you begin)")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://dotnet.microsoft.com/download/dotnet-core/3.1?WT.mc_id=microsoft-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v(".NET Core latest version SDK"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("You'll need the "),a("a",{attrs:{href:"https://visualstudio.microsoft.com/downloads/?WT.mc_id=microsoft-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("latest version of Visual Studio"),a("OutboundLink")],1),e._v(" with the Azure workload installed. Alternatively, you can use "),a("a",{attrs:{href:"https://code.visualstudio.com?WT.mc_id=other-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("Visual Studio Code"),a("OutboundLink")],1)])]),e._v(" "),a("h4",{attrs:{id:"run-a-graphql-api-in-asp-net-core-on-azure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#run-a-graphql-api-in-asp-net-core-on-azure"}},[e._v("#")]),e._v(" Run a GraphQL API in ASP.NET Core on Azure")]),e._v(" "),a("p",[e._v("Because GraphQL is a specification and not a framework, we can implement it by either creating our own, custom implementation, or by using an existing implementation. In this example, we'll use the existing implementation of the "),a("a",{attrs:{href:"https://hotchocolate.io/?WT.mc_id=other-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("Hot Chocolate library"),a("OutboundLink")],1),e._v(". This is a set of libraries that we can use as NuGet packages and support using GraphQL in ASP.NET Core. In fact, the sample application that we will use is the ASP.NET Core Star Wars example application that you can find "),a("a",{attrs:{href:"https://github.com/ChilliCream/hotchocolate?WT.mc_id=github-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),a("OutboundLink")],1),e._v(". It is a simple GraphQL API that exposes information about Star Wars. Let's get started.")]),e._v(" "),a("p",[e._v("First, we will create the sample application on our local machine.")]),e._v(" "),a("ol",[a("li",[e._v("Open a command prompt")]),e._v(" "),a("li",[e._v("Create a new directory for the sample application and navigate to it, like this")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("mkdir starwars\ncd starwars\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("Create a new .NET Core application from the star wars example template with these commands:")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("dotnet new -i HotChocolate.Templates.StarWars\ndotnet new starwars\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("ol",{attrs:{start:"4"}},[a("li",[e._v("That's it! Open the folder of the sample application and open the solution file with Visual Studio.")])]),e._v(" "),a("img",{attrs:{src:e.$withBase("/files/73starwarsexample.png")}}),e._v(" "),a("p",[e._v("(Star Wars example GraphQL application in Visual Studio)")]),e._v(" "),a("p",[e._v("The example application doesn't have any controllers and contains models and repositories and loads its data in-memory. We can explore what happens in the application by opening the "),a("strong",[e._v("Startup.cs")]),e._v(" file.\nIn Startup.cs, we see that the file uses the "),a("strong",[e._v("HotChocolate")]),e._v(" libraries, which provide the magic ingredients to work with GraphQL.")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("using HotChocolate.AspNetCore;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("And in the ConfigureServices method, we can see that the repositories are loaded and that we use an in-memory subscription provider, which loads the data for the GraphQL API in-memory. In a real-world scenario, you would use another data store that retrieves data from, let's say an "),a("a",{attrs:{href:"https://azure.microsoft.com/services/sql-database/?WT.mc_id=azure-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("Azure SQL Database"),a("OutboundLink")],1),e._v(". Also, it uses the Hot Chocolate GraphQL ASP.NET Core middleware by using the AddGraphQL method and declaring a new GraphQL schema in it, using queries, mutations, subscriptions and types, like Human and Droid. This makes up the GraphQL API as it lays out which resources are available and which queries can access them. Drill down into any of these types to get more information.")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('        public void ConfigureServices(IServiceCollection services)\n        {\n            // Add the custom services like repositories etc ...\n            services.AddSingleton<ICharacterRepository, CharacterRepository>();\n            services.AddSingleton<IReviewRepository, ReviewRepository>();\n\n            // Add in-memory event provider\n            services.AddInMemorySubscriptionProvider();\n\n            // Add GraphQL Services\n            services.AddGraphQL(sp => SchemaBuilder.New()\n                .AddServices(sp)\n                .AddQueryType(d => d.Name("Query"))\n                .AddMutationType(d => d.Name("Mutation"))\n                .AddSubscriptionType(d => d.Name("Subscription"))\n                .AddType<CharacterQueries>()\n                .AddType<ReviewQueries>()\n                .AddType<ReviewMutations>()\n                .AddType<ReviewSubscriptions>()\n                .AddType<Human>()\n                .AddType<Droid>()\n                .AddType<Starship>()\n                .Create());\n        }\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br")])]),a("p",[e._v("Finally, in the Configure method, the application sets up a route for the GraphQL endpoint and includes a playground, which we'll use later to test the API.")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app\n                .UseRouting()\n                .UseWebSockets()\n                .UseGraphQL("/graphql")\n                .UsePlayground("/graphql")\n                .UseVoyager("/graphql");\n        }\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br")])]),a("p",[e._v("Let's see if we can get this application to run in Azure")]),e._v(" "),a("ol",[a("li",[e._v("Right-click the project file in Visual Studio and select "),a("strong",[e._v("Publish")])]),e._v(" "),a("li",[e._v("In the wizard that opens, select "),a("strong",[e._v("Azure")]),e._v(" as the publish target and select "),a("strong",[e._v("Next")])])]),e._v(" "),a("img",{attrs:{src:e.$withBase("/files/73publish.png")}}),e._v(" "),a("p",[e._v("(Publish application window in Visual Studio)")]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[e._v("Next, select "),a("strong",[e._v("Azure App Service (Windows)")]),e._v(" and select "),a("strong",[e._v("Next")])]),e._v(" "),a("li",[e._v("Now, select "),a("strong",[e._v('"Create a new Azure App Service"')]),e._v(" as we are going to publish the app to a new App Service Web App")]),e._v(" "),a("li",[e._v("In the Create new App Service window\n"),a("ol",[a("li",[e._v("Leave the "),a("strong",[e._v("Name")]),e._v(" as it is")]),e._v(" "),a("li",[e._v("Select a "),a("strong",[e._v("Resource group")])]),e._v(" "),a("li",[e._v("Create a new "),a("strong",[e._v("Hosting Plan")])]),e._v(" "),a("li",[e._v("Select "),a("strong",[e._v("Create")]),e._v(". This can take a minute as it will create the App Service in Azure")])])]),e._v(" "),a("li",[e._v("Once the App Service is created, select it and select "),a("strong",[e._v("Finish")])]),e._v(" "),a("li",[e._v("Now select Publish to publish the application to Azure. Once it is done, it will open the App Service URL in a browser")])]),e._v(" "),a("p",[e._v("When the App Service URL is opened in a browser, it will show an error as there is nothing to display. Remember that we can use the GraphQL API with the route "),a("strong",[e._v("/graphql")]),e._v(". So let's try that and let's go to the playground by adding "),a("strong",[e._v("/graphql/playground")]),e._v(" to the URL. This will open the playground, which is a visual GraphQL editor that you can use to test the API. In a real-world scenario, you would consume the API in an application by simply creating an HTTP request and firing it at the GraphQL endpoint.")]),e._v(" "),a("img",{attrs:{src:e.$withBase("/files/73playground.png")}}),e._v(" "),a("p",[e._v("(GraphQL playground running in Azure)")]),e._v(" "),a("p",[e._v("You can now test the API in the playground by creating queries. In the "),a("strong",[e._v("Docs tab on the right")]),e._v(", you can find out which queries and resources are available for this API. Here is an example of a query that you can use:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("query MyQuery{\n    hero(episode:EMPIRE){\n        name\n    }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("This query uses the hero query to retrieve character data for heroes that were featured in the EMPIRE episode of Star Wars. The fun thing of GraphQL is that you can define that you only want to retrieve certain fields, like the name of the character, and not the complete object.")]),e._v(" "),a("h4",{attrs:{id:"conclusion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion")]),e._v(" "),a("p",[e._v("You can use implementations of the "),a("a",{attrs:{href:"https://graphql.org/?WT.mc_id=other-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("GraphQL"),a("OutboundLink")],1),e._v(" specification to create APIs that allows clients to retrieve only the data that they need, without querying multiple URLs or dealing with API versions. And it is very easy to run a GraphQL API in Azure using an "),a("a",{attrs:{href:"https://azure.microsoft.com/services/app-service/web/?WT.mc_id=azure-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("Azure App Service Web App"),a("OutboundLink")],1),e._v(". Go and check it out!")])])}),[],!1,null,null,null);t.default=s.exports}}]);