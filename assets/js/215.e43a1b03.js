(window.webpackJsonp=window.webpackJsonp||[]).push([[215],{573:function(e,t,a){"use strict";a.r(t);var n=a(42),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("ðŸ”¥  Help shape the future of Azure Tips and Tricks by telling what you'd like us to write about "),a("a",{attrs:{href:"https://github.com/microsoft/AzureTipsAndTricks/issues/new?assignees=&labels=&template=survey.md&title=",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("ðŸ’¡ Learn more : "),a("a",{attrs:{href:"https://docs.microsoft.com/azure/azure-app-configuration/overview?WT.mc_id=docs-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("Azure App Configuration"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("ðŸ“º Watch the video : "),a("a",{attrs:{href:"https://youtu.be/1d-rpBYf2QI?WT.mc_id=youtube-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("Adding Azure Feature Flags to Angular projects"),a("OutboundLink")],1),e._v(".")])]),e._v(" "),a("h3",{attrs:{id:"how-to-add-azure-feature-flags-to-angular-projects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-add-azure-feature-flags-to-angular-projects"}},[e._v("#")]),e._v(" How to Add Azure Feature Flags to Angular projects")]),e._v(" "),a("h4",{attrs:{id:"feature-flags-are-your-friends"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#feature-flags-are-your-friends"}},[e._v("#")]),e._v(" Feature Flags are your friends")]),e._v(" "),a("p",[e._v("When you are working on a big feature, you need to make sure that your code still works with all the other code and doesn't break anything. The easiest way to do that, is to get the code of your big feature in the main code branch to see if it works. The problem with this approach is that you end up with unfinished features in your main code. Feature flags allow you to hide features until they are done and switch them on or off dynamically, without changing code. This is great for unfinished features and also for experimenting with features. You can switch them on to see if and how they are used and off again when you need to.")]),e._v(" "),a("p",[e._v("A feature flag is a boolean value that you set in an external system. The value is read by your application and determines if a feature is shown or activated. In Azure, you can use the "),a("a",{attrs:{href:"https://docs.microsoft.com/azure/azure-app-configuration/concept-feature-management?WT.mc_id=docs-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("Feature Manager"),a("OutboundLink")],1),e._v(" of the "),a("a",{attrs:{href:"https://docs.microsoft.com/azure/azure-app-configuration/overview?WT.mc_id=docs-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("Azure App Configuration Service"),a("OutboundLink")],1),e._v(" to manage feature flags. In this post, we'll see how to use these in an Angular application.")]),e._v(" "),a("h4",{attrs:{id:"prerequisites"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),a("p",[e._v("If you want to follow along, you'll need the following:")]),e._v(" "),a("ul",[a("li",[e._v("An Azure subscription (If you don't have an Azure subscription, create a "),a("a",{attrs:{href:"https://azure.microsoft.com/free/?WT.mc_id=azure-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("free account"),a("OutboundLink")],1),e._v(" before you begin)")]),e._v(" "),a("li",[e._v("You'll need the "),a("a",{attrs:{href:"https://visualstudio.microsoft.com/downloads/?WT.mc_id=microsoft-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("latest version of Visual Studio"),a("OutboundLink")],1)])]),e._v(" "),a("h4",{attrs:{id:"using-feature-flags-in-an-angular-application"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-feature-flags-in-an-angular-application"}},[e._v("#")]),e._v(" Using Feature Flags in an Angular application")]),e._v(" "),a("p",[e._v("We'll create an Azure App Configuration service and add a feature flag to it, so that we can use that in an Angular application. Let's start by creating the App Configuration in the Azure portal:")]),e._v(" "),a("ol",[a("li",[e._v("Go to the "),a("a",{attrs:{href:"https://portal.azure.com/?WT.mc_id=azure-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("Azure portal"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Click the "),a("strong",[e._v("Create a resource")]),e._v(" button (the plus-sign in the top left corner)")])]),e._v(" "),a("img",{attrs:{src:e.$withBase("/files/75createappconfig.png")}}),e._v(" "),a("p",[e._v("(Create an App Configuration in the Azure portal)")]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[e._v("Search for "),a("strong",[e._v("App Configuration")]),e._v(" and select the result. This opens the "),a("strong",[e._v("Create App Configuration blade")]),e._v(" "),a("ol",[a("li",[e._v("Select a "),a("strong",[e._v("Resource Group")])]),e._v(" "),a("li",[e._v("Fill in a "),a("strong",[e._v("Name")])]),e._v(" "),a("li",[e._v("Select a "),a("strong",[e._v("Location")])]),e._v(" "),a("li",[e._v("Select a "),a("strong",[e._v("Pricing Tier")]),e._v(". The free tier is fine for this example")]),e._v(" "),a("li",[e._v("Select "),a("strong",[e._v("Review + create")]),e._v(" and "),a("strong",[e._v("Create")]),e._v(" after that. This creates the App Configuration Service")])])])]),e._v(" "),a("p",[e._v("Once the App Configuration is created, we need to create a feature flag in it.")]),e._v(" "),a("ol",[a("li",[e._v("Go to the "),a("strong",[e._v("App Configuration")]),e._v(" service in the Azure portal")]),e._v(" "),a("li",[e._v("Select the "),a("strong",[e._v("Feature manager")]),e._v(" menu")]),e._v(" "),a("li",[e._v("Select "),a("strong",[e._v("Add")]),e._v(" to add a new feature flag")]),e._v(" "),a("li",[e._v("Type in a "),a("strong",[e._v("Key")]),e._v(" name. Let's use \""),a("strong",[e._v("ShowCounter")]),e._v('"')]),e._v(" "),a("li",[e._v("Leave the rest as it is and select "),a("strong",[e._v("Apply")]),e._v(" to add the feature flag. That's it")])]),e._v(" "),a("img",{attrs:{src:e.$withBase("/files/75flag.png")}}),e._v(" "),a("p",[e._v("(Add Feature Flag in the Azure portal)")]),e._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[e._v("Also, still in the App Configuration in the Azure portal, navigate to the "),a("strong",[e._v("Access Keys")]),e._v(" menu")]),e._v(" "),a("li",[e._v("Select "),a("strong",[e._v("Read-only keys")])]),e._v(" "),a("li",[e._v("Copy the "),a("strong",[e._v("connection string")]),e._v(". We'll need this later")])]),e._v(" "),a("p",[e._v("We now have a configured App Configuration with a feature flag in it. Let's create the Angular app and read the flag from there.")]),e._v(" "),a("ol",[a("li",[e._v("Open Visual Studio")]),e._v(" "),a("li",[e._v("Select "),a("strong",[e._v("Create a new project")])]),e._v(" "),a("li",[e._v("Select "),a("strong",[e._v("ASP.NET Core Web Application")]),e._v(" and select "),a("strong",[e._v("Next")])]),e._v(" "),a("li",[e._v("Pick a name and location for the application and select "),a("strong",[e._v("Create")])]),e._v(" "),a("li",[e._v("In the dialog that pos up, select "),a("strong",[e._v("Angular")]),e._v(" and select "),a("strong",[e._v("Create")]),e._v(". This creates an ASP.NET Core application with an Angular front-end")])]),e._v(" "),a("img",{attrs:{src:e.$withBase("/files/75angular.png")}}),e._v(" "),a("p",[e._v("(ASP.NET Core application with Angular front-end in Visual Studio)")]),e._v(" "),a("p",[e._v("Let's change the Angular part of the application so that it connects to the App Configuration and retrieves the feature flag. As this is an ASP.NET Core application, we could connect to App Configuration on the server, but I want to show you how to do all of this client-side. The goal is to show and hide the counter menu item with a feature flag.")]),e._v(" "),a("ol",[a("li",[e._v("To connect to the App Configuration from Angular, we need to add two packages to the Angular app. We can do this by adding them in the package.json file, which you can find in the ClientApp folder, with the rest of the Angular application. Open "),a("strong",[e._v("package.json")])]),e._v(" "),a("li",[e._v("Insert the following lines of code into the dependencies section:")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    "@azure/app-configuration": "^1.1.0",\n    "@azure/identity": "^1.0.3",\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("Open "),a("strong",[e._v("ClientApp/src/app/nav-menu/nav-menu.components.ts.")]),e._v(" This is the class responsible for the navigation menu. Change the class to look like the code below. This code imports the App Configuration Client from the package and creates a new parameter called counterFeature. It gets the value for the counterFeature from the ShowCounter method that connects to App Configuration and retrieves the feature flag. You need to insert the "),a("strong",[e._v("read-only connection string to App Config")]),e._v(" in the "),a("strong",[e._v("conn const")]),e._v(". It should be the read-only connection string, because this string will be published to the client and therefore you should assume that anybody can access it.")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("import { Component } from '@angular/core';\nimport { AppConfigurationClient } from \"@azure/app-configuration\";\n\n@Component({\n  selector: 'app-nav-menu',\n  templateUrl: './nav-menu.component.html',\n  styleUrls: ['./nav-menu.component.css']\n})\nexport class NavMenuComponent {\n  isExpanded = false;\n\n  collapse() {\n    this.isExpanded = false;\n  }\n\n  toggle() {\n    this.isExpanded = !this.isExpanded;\n  }\n\n  counterFeature = this.ShowCounter();\n\n  async ShowCounter() {\n    const conn = 'Insert App Configuration Read-Only Connection String';\n    const client = new AppConfigurationClient(conn);\n\n    var val = await client.getConfigurationSetting({ key: \".appconfig.featureflag/ShowCounter\" });\n\n    return JSON.parse(val.value).enabled;\n  }\n}\n\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br"),a("span",{staticClass:"line-number"},[e._v("28")]),a("br"),a("span",{staticClass:"line-number"},[e._v("29")]),a("br"),a("span",{staticClass:"line-number"},[e._v("30")]),a("br"),a("span",{staticClass:"line-number"},[e._v("31")]),a("br")])]),a("ol",{attrs:{start:"4"}},[a("li",[e._v("Open "),a("strong",[e._v("ClientApp/src/app/nav-menu/nav-menu.components.html.")]),e._v(" This contains the HTML for the navigation menu. Find the list item for the counter and replace its code with the code below. This reads the counterFeature parameter and toggles the visibility attribute based on that. I use the async keyword for it, because we retrieve the counterFeature using the async method ShowCounter.")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('          <li  [style.visibility]="(counterFeature | async) ? \'visible\' : \'hidden\'" class="nav-item" [routerLinkActive]="[\'link-active\']">\n            <a class="nav-link text-dark" [routerLink]="[\'/counter\']">Counter</a>\n          </li>\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("That's it! Now run the application and see what happens. When the application opens, you should see something like the image below, with the counter menu item missing. That is because, by default, the feature flag that we've added is disabled.")]),e._v(" "),a("img",{attrs:{src:e.$withBase("/files/75flaggdisabled.png")}}),e._v(" "),a("p",[e._v("(Counter menu invisible)")]),e._v(" "),a("p",[e._v("Now go back to the Azure portal and to the feature flag and toggle its state to "),a("strong",[e._v("On")]),e._v(" by clicking on "),a("strong",[e._v("On")]),e._v(". Now go back to the application and refresh the screen.")]),e._v(" "),a("img",{attrs:{src:e.$withBase("/files/75flagenabled.png")}}),e._v(" "),a("p",[e._v("(Counter menu visible after feature flag was toggled)")]),e._v(" "),a("p",[e._v("The counter menu is now visible, without changing code or redeploying the application.")]),e._v(" "),a("h4",{attrs:{id:"conclusion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[e._v("#")]),e._v(" Conclusion")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://docs.microsoft.com/azure/azure-app-configuration/overview?WT.mc_id=docs-azuredevtips-azureappsdev",target:"_blank",rel:"noopener noreferrer"}},[e._v("Azure App Configuration Service"),a("OutboundLink")],1),e._v(" enables you to create feature flags that can dynamically show or hide features in your application, without changing code or redeploying your app. Go and check it out!")])])}),[],!1,null,null,null);t.default=r.exports}}]);